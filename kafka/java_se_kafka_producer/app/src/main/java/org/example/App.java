/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import java.io.IOException;
import java.net.InetAddress;
import java.util.Properties;

import org.apache.kafka.clients.CommonClientConfigs;
import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.common.serialization.StringSerializer;

import io.prometheus.metrics.core.metrics.Counter;

public class App {
    private static Counter consumerCounter = getNewPromCounter();
    public static void main(String[] args) throws IOException, InterruptedException {
        
        io.prometheus.metrics.exporter.httpserver.HTTPServer.builder()
                .port(8080)
                .buildAndStart();

        Properties config = new Properties();
        config.put(CommonClientConfigs.CLIENT_ID_CONFIG, InetAddress.getLocalHost().getHostName() + "JAVA_SE_PRODUCER");
        config.put(CommonClientConfigs.GROUP_ID_CONFIG, "JAVA_SE_PRODUCER");
        config.put(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, getEnv("BROKER"));
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,StringSerializer.class);

        try( var producer = new KafkaProducer<String,String>(config)){
            var topic = getEnv("TOPIC");
            while(true){
                producer.send(new ProducerRecord<String, String>(topic,"KEY","value"));
                consumerCounter.inc();
            }
        }

    }

    private static Counter getNewPromCounter(){
        return Counter.builder()
        .name("message_produced_counter")
        .help("The amount of messages produced")
        .register();
    }
    private static String getEnv(String envName) {
        var envValue = System.getenv().get(envName);
        if(envValue == null){
            throw new IllegalStateException(envName+ " env var needs to be populated");
        }
        System.out.println("envName: "+ envName +" has value: "+ envValue);
        return envValue;
    }
}
